<div class="center jumbotron" id="searchForm">
  <h1>Find events near you:</h1>

  <div id="event-search">
    <%= form_tag("/search", method: "get") do |f| %>
      <div class="form-group row">
        <div class="col-lg-4">
          <%= text_field_tag :location, "", class: "form-control", type: "search", placeholder: "Denver, Colorado", id: "autocomplete", required: true%>
          <label for="location">Location</label>
        </div>
        <div class="col-lg-4">
          <%= text_field_tag :q, params[:q], class: "form-control", type: "text", placeholder: "Foosball" %>
          <label for="q">Search term (optional)</label>
        </div>
        <div class="col-lg-4">
          <%= text_field_tag :time, "", class: "daterange", type: "text", placeholder: "mm/dd/yyyy - mm/dd/yyyy", id: "daterangepicker" %>
          <label for="time">Dates (defaults to today)</label>
        </div>

        <%= hidden_field_tag :lat, "", class: "form-control", id: "lat"%>
        <%= hidden_field_tag :lng, "", class: "form-control", id: "lng"%>

        <%= hidden_field_tag :f_b_lat, "", class: "form-control", id: "f-b-lat"%>
        <%= hidden_field_tag :f_f_lat, "", class: "form-control", id: "f-f-lat"%>
        <%= hidden_field_tag :b_b_lng, "", class: "form-control", id: "b-b-lng"%>
        <%= hidden_field_tag :b_f_lng, "", class: "form-control", id: "b-f-lng"%>
      </div>

      <%= submit_tag "Search", class: "btn btn-primary" %>
    <% end %>
  </div>

</div>

<script type="text/javascript">
  var countryRestrict = {'country': 'us'};
  var autocomplete;

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical
    // location types.
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
        {types: ['(cities)'], componentRestrictions: countryRestrict});

    // When the user selects an address from the dropdown, populate the address
    // fields in the form.
    autocomplete.addListener('place_changed', placeSelected);
  }

  // Hackily sending both the lat and lng as well as the viewport... should simplify this.

  function placeSelected() {
    var place = autocomplete.getPlace();

    var viewport = place.geometry.viewport;
    var center_lat = (viewport.f.b + viewport.f.f) / 2;
    var center_lng = (viewport.b.b + viewport.b.f) / 2;
    document.getElementById('lat').value = center_lat;
    document.getElementById('lng').value = center_lng;

    document.getElementById('f-b-lat').value = viewport.f.b;
    document.getElementById('f-f-lat').value = viewport.f.f;
    document.getElementById('b-b-lng').value = viewport.b.b;
    document.getElementById('b-f-lng').value = viewport.b.f;
  }
</script>

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=<%=ENV['GOOGLE_API_TOKEN']%>&libraries=places&callback=initAutocomplete"></script>

<script type="text/javascript">

  $('input[class="daterange"]').daterangepicker({
      autoUpdateInput: false,
      locale: {
          cancelLabel: 'Clear'
      },
      minDate: moment()
  });

  $('input[class="daterange"]').on('apply.daterangepicker', function(ev, picker) {
      $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
  });

  $('input[name="datefilter"]').on('cancel.daterangepicker', function(ev, picker) {
      $(this).val('');
  });
</script>
